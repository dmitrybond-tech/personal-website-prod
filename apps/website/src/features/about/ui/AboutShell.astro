---
import { mapIconToken } from '../../../shared/ui/icons/mapIconToken';
import Icon from '../../../shared/ui/icons/Icon.astro';

// Import new entity components
import ProfileCard from '../../../entities/profile/ui/ProfileCard.astro';
import SkillsSection from '../../../entities/skills/ui/SkillsSection.astro';
import TimelineSection from '../../../entities/timeline/ui/TimelineSection.astro';
import PortfolioGrid from '../../../entities/portfolio/ui/PortfolioGrid.astro';
import TestimonialsSection from '../../../entities/testimonials/ui/TestimonialsSection.astro';
import FavoritesSection from '../../../entities/favorites/ui/FavoritesSection.astro';

export interface Props {
  locale: 'en' | 'ru';
  data: {
    config: {
      title: string;
      lead?: string;
    };
    sections: {
      main?: any;
      skills?: any;
      experience?: any;
      education?: any;
      portfolio?: any;
      testimonials?: any;
      favorites?: any;
    };
  };
  aboutData?: {
    profile?: any;
    skills?: any;
    experience?: any;
    education?: any;
    portfolio?: any;
    testimonials?: any;
    favorites?: any;
    sections?: any[];
    links?: any[];
    cv_pdf?: string;
    gallery?: string[];
  };
}

const { locale, data, aboutData } = Astro.props;
const { config, sections } = data;

// Helper function to get section data from the new content structure
function getSectionData(sectionKey: string) {
  return aboutData?.[sectionKey] || null;
}
---

<section class="cv-root flex justify-center xl:relative xl:left-7">
  <div class="cv-layout mx-auto max-w-[var(--cv-max-w)] px-[var(--cv-gap)]
              grid grid-cols-1 xl:grid-cols-[1fr_auto] gap-8
              overflow-visible">
    <main class="min-w-0 isolate w-full max-w-5xl space-y-4 px-2 py-3 sm:space-y-6 sm:px-8 sm:py-12 lg:space-y-8 lg:py-20">
      <div class="cv-sections flex flex-col gap-8 xl:gap-10 pt-1">
        <!-- Profile Section -->
        {getSectionData('profile') && (
          <ProfileCard data={getSectionData('profile')} />
        )}
        
        <!-- Skills Section -->
        {getSectionData('skills') && (
          <SkillsSection data={getSectionData('skills')} />
        )}
        
        <!-- Experience Section -->
        {getSectionData('experience') && (
          <TimelineSection 
            data={{ items: getSectionData('experience').jobs || [] }}
            title={locale === 'ru' ? 'Опыт работы' : 'Work Experience'}
            icon="suitcase"
          />
        )}
        
        <!-- Portfolio Section -->
        {getSectionData('portfolio') && (
          <PortfolioGrid data={getSectionData('portfolio')} />
        )}
        
        <!-- Education Section -->
        {getSectionData('education') && (
          <TimelineSection 
            data={{ items: getSectionData('education').items || [] }}
            title={locale === 'ru' ? 'Образование' : 'Education'}
            icon="graduation-cap"
          />
        )}
        
        <!-- Testimonials Section -->
        {getSectionData('testimonials') && (
          <TestimonialsSection data={getSectionData('testimonials')} />
        )}
        
        <!-- Favorites Section -->
        {getSectionData('favorites') && (
          <FavoritesSection data={getSectionData('favorites')} />
        )}
        
        <!-- CMS-managed sections can be added here -->
        {aboutData?.sections?.map((section, index) => (
          <div class="cv-section bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm border border-gray-200 dark:border-gray-700" data-section-id={`cms-section-${index}`}>
            <div class="cv-section-header flex items-center gap-3 mb-4">
              {section.icon && (
                <Icon 
                  icon={section.icon} 
                  class="cv-section-icon text-2xl text-blue-600 dark:text-blue-400"
                />
              )}
              {section.heading && (
                <h2 class="cv-section-title text-xl font-semibold text-gray-900 dark:text-white">{section.heading}</h2>
              )}
            </div>
            {section.body && (
              <div class="cv-section-content prose prose-sm max-w-none text-gray-700 dark:text-gray-300">
                <div set:html={section.body} />
              </div>
            )}
            {section.image && (
              <div class="cv-section-image mt-4">
                <img 
                  src={section.image} 
                  alt={section.heading || 'Section image'} 
                  class="w-full h-auto rounded-lg"
                />
              </div>
            )}
          </div>
        ))}
      </div>
    </main>
    <!-- Sidebar removed - using new content structure -->
  </div>
</section>

<style>
  .cv-root {
    /* Background now handled at body level for About pages */
    overflow: visible !important;
  }
  
  
  .cv-layout {
    overflow: visible !important;
  }
  
  .cv-main {
    /* Utilities moved to markup */
  }
  
  /* Ensure proper spacing for sticky navbar */
  .cv-main > * {
    scroll-margin-top: var(--navbar-h);
  }

  /* CMS section styles - utilities moved to markup */
  .cv-section {
    /* Utilities moved to markup */
  }

  .cv-section-header {
    /* Utilities moved to markup */
  }

  .cv-section-icon {
    /* Utilities moved to markup */
  }

  .cv-section-title {
    /* Utilities moved to markup */
  }

  .cv-section-content {
    /* Utilities moved to markup */
  }

  .cv-section-image {
    /* Utilities moved to markup */
  }
</style>

<script is:inline>
  function setActiveItem() {
    try {
      var path = (window && window.location && window.location.pathname) || '';
      var hash = (window && window.location && window.location.hash) || '';
      var links = document.querySelectorAll('[data-sidenav-link]');
      links.forEach(function (a) {
        var href = a && a.getAttribute ? (a.getAttribute('href') || '') : '';
        if (!href) {
          a && a.setAttribute && a.setAttribute('aria-current', 'false');
          return;
        }
        var active =
          (path && href && path.endsWith(href)) ||
          (hash && href && hash === href);
        a.classList.toggle('active', !!active);
        a.setAttribute('aria-current', active ? 'page' : 'false');
      });
    } catch (e) { /* no-op */ }
  }

  document.addEventListener('DOMContentLoaded', setActiveItem);
  window.addEventListener('hashchange', setActiveItem);
</script>

---
import type { LevelledSkill } from '../../types/sections/skills-section.types';
import Icon from '../Icon.astro';
import Typography from '../Typography.astro';
import SkillLevel from './SkillLevel.astro';

export interface Props extends LevelledSkill {}

const { url, icon, iconColor, name, level, description } = Astro.props;

// Inline icon resolver - uses CDN cached stock icons
const iconMapping: Record<string, string> = {
  "discovery": "simple-icons:discovery",
  "analytics": "simple-icons:googleanalytics",
  "itilv4": "simple-icons:itil",
  "pmbok": "simple-icons:projectmanagementinstitute",
  "agile": "simple-icons:agile",
  "togaf": "simple-icons:iso",
  "iso27001": "simple-icons:eslint",
  "cloudiaas": "simple-icons:amazonaws",
  "linux": "simple-icons:linux",
  "python": "simple-icons:python",
  "sql": "simple-icons:postgresql",
  "mlai": "simple-icons:tensorflow"
};

const normalize = (s: string) => String(s || '').toLowerCase()
  .replace(/[\s_+.-]/g, '')
  .replace(/[^a-z0-9]/g, '');

const resolvedIcon = icon || (name ? iconMapping[normalize(name)] || 'mdi:help-circle' : 'mdi:help-circle');

const IconWrapper = url ? 'a' : 'div';
---

<div class="flex flex-col gap-2">
  <div class="flex h-5 items-center justify-between">
    <IconWrapper class="flex h-5 gap-2" {...url && { href: url, target: '_blank', rel: 'noopener noreferrer' }}>
      {resolvedIcon && <Icon name={resolvedIcon} color={iconColor} size={20} />}
      <Typography variant="skill">{name}</Typography>
    </IconWrapper>
    {
      description && (
        <div class="flex h-3.5 w-3.5" data-tooltip={description} data-tooltip-placement="top">
          <Icon name="fa6-solid:circle-info" color="#D1D5DB" size={14} />
        </div>
      )
    }
  </div>
  <SkillLevel skillLevel={level} />
</div>

---
import BookingTiles from '@/features/bookme/BookingTiles.tsx';
import { CAL_ENV, parseEnvEvents, makeCalLink } from '@/shared/lib/cal/env';

interface Props {
  locale: 'en' | 'ru';
  showServices?: boolean; // по умолчанию false для BookMe
}

const { locale, showServices = false } = Astro.props as Props;

// Load MD via static imports (safer for bundler)
let frontmatter: any = {};
if (locale === 'ru') {
  frontmatter = (await import('@/content/ru/bookme.md')).frontmatter;
} else {
  frontmatter = (await import('@/content/en/bookme.md')).frontmatter;
}

// Fallback to existing TypeScript data if frontmatter is empty
if (!frontmatter.title) {
  const { bookmeData } = await import(/* @vite-ignore */ `@content/${locale}/bookme.ts`);
  frontmatter = {
    title: bookmeData.title,
    subtitle: bookmeData.subtitle,
    description: bookmeData.description,
    cta: bookmeData.cta.label,
    defaultTileSlug: 'intro-30m',
    tiles: []
  };
}

// Merge tiles: frontmatter tiles first; fill missing labels from env
const envEvents = parseEnvEvents(CAL_ENV.EVENTS);
let tiles = (frontmatter.tiles ?? []).map((t: any) => {
  const found = envEvents.find(e => e.slug === t.slug);
  return { 
    slug: t.slug, 
    label: t.label ?? found?.label ?? t.slug, 
    caption: t.caption, 
    icon: t.icon 
  };
});

if (!tiles?.length) {
  tiles = envEvents.map(e => ({ slug: e.slug, label: e.label }));
}

const initialSlug = frontmatter.defaultTileSlug ?? tiles?.[0]?.slug ?? envEvents?.[0]?.slug;
const initialCalLink = initialSlug ? makeCalLink(CAL_ENV.USERNAME, initialSlug) : '';
---

<section id="bookme" class="mx-auto w-full max-w-[var(--cv-content-max-w)] px-4 sm:px-6">
  <div class="mb-6">
    {frontmatter.title && <h1 class="text-2xl md:text-3xl font-semibold">{frontmatter.title}</h1>}
    {frontmatter.subtitle && <p class="mt-1 text-[color:var(--cv-muted)]">{frontmatter.subtitle}</p>}
    {frontmatter.description && <p class="mt-3">{frontmatter.description}</p>}
  </div>
  
  <BookingTiles client:load tiles={tiles} initialSlug={initialSlug} />
</section>

<!-- Cal.com Bootstrap Script -->
<script is:inline>
  (function (C, A, L) {
    let p = function (a, ar) { a.q.push(ar); };
    let d = C.document;
    C.Cal = C.Cal || function () {
      let cal = C.Cal, ar = arguments;
      if (!cal.loaded) {
        cal.ns = {}; cal.q = cal.q || [];
        d.head.appendChild(d.createElement("script")).src = A;
        cal.loaded = true;
      }
      if (ar[0] === L) {
        const api = function () { p(api, arguments); };
        const ns = ar[1]; api.q = api.q || [];
        typeof ns === "string" ? (cal.ns[ns] = api) && p(api, ar) : p(cal, ar);
        return;
      }
      p(cal, ar);
    };
  })(window, "https://cal.com/embed.js", "init");
</script>

<!-- Global Cal configuration -->
<script is:inline>
  Cal.config = Cal.config || {};
  Cal.config.forwardQueryParams = true;
</script>


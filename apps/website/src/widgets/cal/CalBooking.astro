---
// apps/website/src/widgets/cal/CalBooking.astro
import { parseCalEvents, makeCalDataLink, buildCalOverlayUrl } from '../../lib/cal';

interface Props {
  locale?: 'en' | 'ru';
  className?: string;
}

const { locale = 'en', className = '' } = Astro.props;

// Получаем конфигурацию из env
const username = import.meta.env.PUBLIC_CAL_USERNAME;
const baseCalLink = import.meta.env.PUBLIC_CAL_EMBED_LINK;
const eventsString = import.meta.env.PUBLIC_CAL_EVENTS;

// Парсим события из строки формата "slug|label,slug|label"
const events = parseCalEvents(eventsString || '');

// Локализованные тексты
const texts = {
  en: {
    title: 'Book a Meeting',
    subtitle: 'Choose your preferred meeting type',
  },
  ru: {
    title: 'Записаться на встречу',
    subtitle: 'Выберите тип встречи',
  },
};

const t = texts[locale];
---

<section class={`cal-embed-container ${className}`}>
  <div class="cal-booking-header">
    <h2 class="cal-booking-title">{t.title}</h2>
    <p class="cal-booking-subtitle">{t.subtitle}</p>
  </div>

  {baseCalLink && events.length > 0 ? (
    <>
      {/* Кнопки типов встреч */}
      <div class="cal-events-grid">
        {events.map((event, index) => (
          <button
            class="cal-event-tile"
            data-slug={event.slug}
            data-index={index}
            data-active={index === 0 ? 'true' : 'false'}
          >
            {event.label}
          </button>
        ))}
      </div>

      {/* Embed контейнер */}
      <div 
        id="cal-embed" 
        class="cal w-[1040px] h-[490px] max-w-full rounded-2xl bg-neutral-50 dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-800"
        data-cal-link={events.length > 0 ? makeCalDataLink(baseCalLink, events[0].slug) : ''}
      ></div>
    </>
  ) : (
    <div class="cal-embed-error">
      <p>⚠️ Cal.com not configured</p>
      <p>Please set PUBLIC_CAL_EMBED_LINK and PUBLIC_CAL_EVENTS in your environment variables</p>
      <p>Example: PUBLIC_CAL_EVENTS=tech-90m|Tech 90m,intro-30m|Intro 30m</p>
    </div>
  )}
</section>

<style>
  .cal-embed-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 48px 24px;
  }

  .cal-booking-header {
    text-align: center;
    margin-bottom: 32px;
  }

  .cal-booking-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0 0 16px 0;
    color: #1a1a1a;
  }

  .cal-booking-subtitle {
    font-size: 1.25rem;
    color: #666;
    margin: 0;
  }

  .cal-events-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 12px;
    margin-bottom: 24px;
  }

  .cal-event-tile {
    border-radius: 16px;
    border: 1px solid #e5e5e5;
    background: white;
    padding: 16px 12px;
    font-size: 14px;
    font-weight: 500;
    color: #1a1a1a;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: center;
  }

  .cal-event-tile:hover {
    border-color: #d4d4d8;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .cal-event-tile[data-active="true"] {
    border-color: #171717;
    box-shadow: 0 0 0 1px #171717;
  }

  .cal-embed-error {
    min-height: 400px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: #f8f9fa;
    border-radius: 16px;
    padding: 40px;
    text-align: center;
    color: #666;
  }

  /* Dark theme */
  :global(.dark) .cal-booking-title {
    color: #ffffff;
  }

  :global(.dark) .cal-booking-subtitle {
    color: #ccc;
  }

  :global(.dark) .cal-event-tile {
    background: #171717;
    border-color: #404040;
    color: #ffffff;
  }

  :global(.dark) .cal-event-tile:hover {
    border-color: #525252;
  }

  :global(.dark) .cal-event-tile[data-active="true"] {
    border-color: #ffffff;
    box-shadow: 0 0 0 1px #ffffff;
  }

  :global(.dark) .cal-embed-error {
    background: rgba(50, 50, 50, 0.8);
    color: #ccc;
  }

  @media (max-width: 768px) {
    .cal-embed-container {
      padding: 24px 16px;
    }

    .cal-booking-title {
      font-size: 2rem;
    }

    .cal-events-grid {
      grid-template-columns: 1fr;
      gap: 8px;
    }

    .cal-event-tile {
      padding: 12px;
    }
  }
</style>

<script define:vars={{ username, baseCalLink, events }}>
  // Инициализация Cal.com booking компонента
  (function() {
    const calEmbed = document.getElementById('cal-embed');
    const eventTiles = document.querySelectorAll('.cal-event-tile');
    
    if (!calEmbed || !baseCalLink || !events.length) return;

    // Проверяем, не загружен ли уже скрипт
    if (document.querySelector('script[src*="cal.com/embed"]')) {
      initCalBooking();
      return;
    }

    // Загружаем Cal.com embed скрипт
    const script = document.createElement('script');
    script.src = 'https://cal.com/embed.js';
    script.async = true;
    
    script.onload = function() {
      initCalBooking();
    };

    script.onerror = function() {
      calEmbed.innerHTML = `
        <div class="cal-embed-error">
          <p>Failed to load calendar. Please try again later.</p>
          <a href="${baseCalLink}" target="_blank" class="cal-embed-fallback">
            Open Calendar in New Tab
          </a>
        </div>
      `;
    };

    document.head.appendChild(script);

    function initCalBooking() {
      // Ждем, пока Cal будет доступен
      const checkCal = () => {
        if (window.Cal) {
          try {
            // Инициализируем Cal.com
            window.Cal('init', { origin: 'https://cal.com' });
            
            // Определяем активное событие из URL или используем первое
            const activeEvent = getActiveEventFromURL() || events[0];
            
            // Активируем соответствующий тайл
            activateEventTile(activeEvent);
            
            // Загружаем embed с активным событием
            loadEventEmbed(activeEvent);
            
            console.log('Cal.com booking initialized with:', activeEvent);
          } catch (error) {
            console.error('Cal.com booking initialization failed:', error);
            calEmbed.innerHTML = `
              <div class="cal-embed-error">
                <p>Calendar initialization failed. Please try again later.</p>
                <a href="${baseCalLink}" target="_blank" class="cal-embed-fallback">
                  Open Calendar in New Tab
                </a>
              </div>
            `;
          }
        } else {
          // Повторяем попытку через 100ms
          setTimeout(checkCal, 100);
        }
      };
      
      checkCal();
    }

    function getActiveEventFromURL() {
      // Проверяем URL параметры ?event=<slug> или #event=<slug>
      const urlParams = new URLSearchParams(window.location.search);
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
      
      const eventSlug = urlParams.get('event') || hashParams.get('event');
      
      if (eventSlug) {
        return events.find(event => event.slug === eventSlug);
      }
      
      return null;
    }

    function activateEventTile(event) {
      // Убираем активный класс со всех тайлов
      eventTiles.forEach(tile => {
        tile.setAttribute('data-active', 'false');
      });
      
      // Активируем нужный тайл
      const targetTile = document.querySelector(`[data-slug="${event.slug}"]`);
      if (targetTile) {
        targetTile.setAttribute('data-active', 'true');
      }
    }

    function loadEventEmbed(event) {
      // Build proper data-cal-link format: username/slug
      const dataCalLink = `${username}/${event.slug}`;
      
      // Build full URL for overlay calendar
      const overlayUrl = `https://cal.com/${username}/${event.slug}?overlayCalendar=true&layout=month_view`;
      
      // Обновляем data-cal-link атрибут
      calEmbed.setAttribute('data-cal-link', dataCalLink);
      
      // Переключаем Cal.com embed
      if (window.Cal) {
        window.Cal('ui', { calLink: overlayUrl });
      }
    }

    // Обработчики кликов по тайлам
    eventTiles.forEach(tile => {
      tile.addEventListener('click', function() {
        const slug = this.dataset.slug;
        const event = events.find(e => e.slug === slug);
        
        if (event) {
          activateEventTile(event);
          loadEventEmbed(event);
          
          // Обновляем URL без перезагрузки страницы
          const url = new URL(window.location);
          url.searchParams.set('event', slug);
          window.history.replaceState({}, '', url);
        }
      });
    });
  })();
</script>

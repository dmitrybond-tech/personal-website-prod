name: Build & Push

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Git LFS pull
        run: |
          git lfs install --skip-smudge=0
          git lfs pull
          git lfs ls-files

      - name: Git LFS sanity
        shell: bash
        run: |
          set -euo pipefail
          git lfs install
          git lfs fetch --all || true
          git lfs checkout || true
          echo "[tree] apps/website/public/uploads (top 20)"
          (test -d apps/website/public/uploads && ls -lah apps/website/public/uploads | head -n 20) || echo "no uploads dir"

      # fail fast: никакие LFS-пойнтеры не должны остаться в публичных ассетах
      - name: Assert no LFS pointers in public assets
        run: |
          set -e
          for d in apps/website/public/uploads apps/website/public/logos; do
            if [ -d "$d" ]; then
              ! grep -R "git-lfs.github.com/spec/v1" -n "$d" || (echo "LFS pointers found in $d"; exit 1)
            fi
          done

      - uses: docker/setup-buildx-action@v3

      - name: Compute image name (lowercase)
        shell: bash
        run: |
          echo "IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

      - name: Load defaults from .env.build (optional)
        shell: bash
        run: |
          if [ -f .env.build ]; then
            set -a; . ./.env.build; set +a
            echo "PUBLIC_CAL_USERNAME=${PUBLIC_CAL_USERNAME}" >> $GITHUB_ENV || true
            echo "PUBLIC_CAL_EMBED_LINK=${PUBLIC_CAL_EMBED_LINK}" >> $GITHUB_ENV || true
            echo "PUBLIC_CAL_EVENTS=${PUBLIC_CAL_EVENTS}" >> $GITHUB_ENV || true
            echo "PUBLIC_SITE_URL=${PUBLIC_SITE_URL}" >> $GITHUB_ENV || true
            echo "PUBLIC_ENV=${PUBLIC_ENV}" >> $GITHUB_ENV || true
            echo "PUBLIC_DECAP_CMS_VERSION=${PUBLIC_DECAP_CMS_VERSION}" >> $GITHUB_ENV || true
          fi

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=sha-
            type=ref,event=branch
            type=raw,value=main,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/website/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            PUBLIC_CAL_USERNAME=${{ vars.PUBLIC_CAL_USERNAME || env.PUBLIC_CAL_USERNAME || '' }}
            PUBLIC_CAL_EMBED_LINK=${{ vars.PUBLIC_CAL_EMBED_LINK || env.PUBLIC_CAL_EMBED_LINK || '' }}
            PUBLIC_CAL_EVENTS=${{ vars.PUBLIC_CAL_EVENTS || env.PUBLIC_CAL_EVENTS || '' }}
            PUBLIC_SITE_URL=${{ vars.PUBLIC_SITE_URL || env.PUBLIC_SITE_URL || '' }}
            PUBLIC_ENV=${{ vars.PUBLIC_ENV || env.PUBLIC_ENV || '' }}
            PUBLIC_DECAP_CMS_VERSION=${{ vars.PUBLIC_DECAP_CMS_VERSION || env.PUBLIC_DECAP_CMS_VERSION || '' }}
            GIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Temporarily disabled smoke test
      # - name: Smoke test assets in container
      #   run: |
      #     IMAGE_TAG=$(echo '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}')
      #     docker run -d --rm -p 3000:3000 --name preprod-check "$IMAGE_TAG"
      #     sleep 3
      #     for p in /uploads/placeholders/avatar.png /logos/sibsutis.svg; do
      #       echo "HEAD $p"
      #       curl -sI "http://127.0.0.1:3000$p" | awk 'NR==1||/Content-Type/i {print}'
      #     done
      #     docker rm -f preprod-check
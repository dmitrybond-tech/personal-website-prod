name: Build & Deploy (preprod)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

# GITHUB_TOKEN хватит и для push в GHCR, и для pull на self-hosted раннере
permissions:
  contents: read
  packages: write

concurrency:
  group: preprod
  cancel-in-progress: false

env:
  IMAGE_MAIN: ghcr.io/${{ github.repository }}:main
  IMAGE_SHA:  ghcr.io/${{ github.repository }}:sha-${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Show workspace
        run: |
          echo "PWD=$PWD"
          ls -la
          sed -n '1,60p' Dockerfile || true
          ls -la apps/website || true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_MAIN }}
            ${{ env.IMAGE_SHA }}
          cache-from: type=registry,ref=${{ env.IMAGE_MAIN }}
          cache-to: type=inline
          build-args: |
            PUBLIC_SITE_URL=${{ vars.PUBLIC_SITE_URL }}
            PUBLIC_ENV=preprod
            PUBLIC_CAL_USERNAME=${{ vars.PUBLIC_CAL_USERNAME }}
            PUBLIC_CAL_EMBED_LINK=${{ vars.PUBLIC_CAL_EMBED_LINK }}
            PUBLIC_CAL_EVENTS=${{ vars.PUBLIC_CAL_EVENTS }}
            PUBLIC_DECAP_CMS_VERSION=${{ vars.PUBLIC_DECAP_CMS_VERSION }}
            GIT_SHA=${{ github.sha }}

  deploy:
    # гоняем именно на твоём VPS-раннере (с лейблом preprod)
    runs-on: [self-hosted, Linux, X64, preprod]
    needs: build
    permissions:
      packages: read
      contents: read
    steps:
      - name: Login to GHCR (runner)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

      - name: Pull & restart
        working-directory: /opt/preprod
        run: |
          docker compose pull
          docker compose up -d
          docker image prune -f

      - name: Show running containers
        run: docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'

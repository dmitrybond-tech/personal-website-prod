name: Deploy Preprod

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [self-hosted, Linux, X64, preprod]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Compute image refs (lowercase)
        shell: bash
        run: |
          REPO_LC=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_MAIN=ghcr.io/${REPO_LC}:main" >> "$GITHUB_ENV"
          echo "IMAGE_SHA=ghcr.io/${REPO_LC}:sha-${{ github.sha }}" >> "$GITHUB_ENV"

      # Убеждаемся, что у пользователя раннера есть ~/.docker (персистентно между запусками)
      - name: Ensure runner docker config exists
        shell: bash
        run: |
          mkdir -p "$HOME/.docker"
          chmod 700 "$HOME/.docker"

      - name: Log in to GHCR (persist for self-hosted)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false  # не разлогиниваемся; креды сохранятся в $HOME/.docker/config.json

      # Простая верификация: проверим, что в конфиге есть запись ghcr.io и тестовый pull проходит
      - name: Verify Docker login
        shell: bash
        run: |
          if [ -f "$HOME/.docker/config.json" ]; then
            grep -q '"ghcr.io"' "$HOME/.docker/config.json" && echo "✓ ghcr.io auth present" || echo "⚠ ghcr.io auth not found"
          else
            echo "⚠ $HOME/.docker/config.json not found"
          fi
          docker pull hello-world:latest >/dev/null && echo "✓ docker pull works" || echo "⚠ docker pull failed"

      - name: Pull image (sha or main)
        shell: bash
        run: |
          set -euo pipefail
          echo "Attempting to pull: $IMAGE_SHA"
          if ! docker pull "$IMAGE_SHA"; then
            echo "Falling back to: $IMAGE_MAIN"
            docker pull "$IMAGE_MAIN"
          fi

      - name: Restart container
        shell: bash
        run: |
          set -euo pipefail
          docker rm -f website-preprod || true
          docker run -d --name website-preprod \
            -p 127.0.0.1:3000:3000 \
            -e NODE_ENV=production \
            "$IMAGE_SHA" || docker run -d --name website-preprod \
            -p 127.0.0.1:3000:3000 \
            -e NODE_ENV=production \
            "$IMAGE_MAIN"

      - name: Show running containers
        run: docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
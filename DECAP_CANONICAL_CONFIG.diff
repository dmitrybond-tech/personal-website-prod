diff --git a/apps/website/src/pages/api/website-admin/config.yml.ts b/apps/website/src/pages/api/website-admin/config.yml.ts
index old..new 100644
--- a/apps/website/src/pages/api/website-admin/config.yml.ts
+++ b/apps/website/src/pages/api/website-admin/config.yml.ts
@@ -7,43 +7,72 @@ export const GET: APIRoute = async ({ request }) => {
   const IS_LOCAL = process.env.DECAP_LOCAL_BACKEND === 'true';
   const REPO_PREFIX = IS_LOCAL ? '' : 'apps/website/';
   
-  // Get origin from request headers (proxy-aware) with fallback
-  const getRequestOrigin = (req: Request) => {
-    const url = new URL(req.url);
-    const xfProto = req.headers.get('x-forwarded-proto');
-    const xfHost = req.headers.get('x-forwarded-host') ?? req.headers.get('host');
-    const proto = (xfProto ?? url.protocol.replace(':', '')) || 'https';
-    const host = xfHost ?? url.host;
-    return `${proto}://${host}`;
-  };
+  // Derive site origin safely behind proxies
+  const url = new URL(request.url);
+  const proto = request.headers.get('x-forwarded-proto') ?? url.protocol.replace(':', '');
+  const host = request.headers.get('x-forwarded-host') ?? request.headers.get('host') ?? url.host;
+  const baseUrl = `${proto}://${host}`;
   
-  const siteUrl = getRequestOrigin(request) || process.env.PUBLIC_SITE_URL || 'http://localhost:4321';
   // Prevent localhost fallback in production
-  const baseUrl = process.env.NODE_ENV === 'production' && siteUrl.includes('localhost') 
+  const siteOrigin = process.env.NODE_ENV === 'production' && baseUrl.includes('localhost')
     ? process.env.PUBLIC_SITE_URL || 'https://dmitrybond.tech'
-    : siteUrl;
+    : baseUrl;
     
   const repo = process.env.DECAP_GITHUB_REPO || 'dmitrybond-tech/personal-website-pre-prod';
   const branch = process.env.DECAP_GITHUB_BRANCH || 'main';
-  
-  // Locked OAuth endpoint (flat structure) - supports both /api/decap/authorize and /api/decap/oauth/authorize
-  const authEndpoint = '/api/decap/authorize';
 
-  const config = {
-    ...(IS_LOCAL ? { local_backend: true } : {}),
-    backend: IS_LOCAL
-      ? { name: 'test-repo' } // локалка пишет через decap-server в ФС
-      : {
+  // Canonical minimal config for Decap CMS
+  // All required fields present to satisfy strict schema validation
+  const config = IS_LOCAL
+    ? {
+        // Local backend mode (decap-server writes to filesystem)
+        local_backend: true,
+        backend: { name: 'test-repo' },
+        publish_mode: 'simple',
+        media_folder: `${REPO_PREFIX}public/uploads`,
+        public_folder: '/uploads',
+        media_library: { name: 'default' },
+        collections: [
+          {
+            name: 'posts',
+            label: 'Blog posts',
+            folder: `${REPO_PREFIX}src/content/posts`,
+            create: true,
+            slug: '{{slug}}',
+            fields: [
+              { label: 'Title', name: 'title', widget: 'string' },
+              { label: 'Body', name: 'body', widget: 'markdown' }
+            ]
+          }
+        ]
+      }
+    : {
+        // GitHub backend mode (production/staging)
+        backend: {
           name: 'github',
-          repo: repo,
-          branch: branch,
-          base_url: baseUrl,
-          auth_endpoint: authEndpoint
+          repo,
+          branch,
+          base_url: siteOrigin,
+          auth_endpoint: '/api/decap/authorize',
         },
-    publish_mode: 'simple',
-    media_folder: `${REPO_PREFIX}public/uploads`,
-    public_folder: '/uploads',
-    collections: [
-      {
-        name: 'posts',
-        label: 'Blog posts',
-        folder: `${REPO_PREFIX}src/content/posts`,
-        create: true,
-        slug: '{{slug}}',
-        fields: [
-          { label: 'Title', name: 'title', widget: 'string' },
-          { label: 'Body', name: 'body', widget: 'markdown' }
+        publish_mode: 'simple',
+        media_folder: `${REPO_PREFIX}public/uploads`,
+        public_folder: '/uploads',
+        media_library: { name: 'default' },
+        collections: [
+          {
+            name: 'posts',
+            label: 'Blog posts',
+            folder: `${REPO_PREFIX}src/content/posts`,
+            create: true,
+            slug: '{{slug}}',
+            fields: [
+              { label: 'Title', name: 'title', widget: 'string' },
+              { label: 'Body', name: 'body', widget: 'markdown' }
+            ]
+          }
         ]
-      }
-    ]
-  };
+      };
+
+  // Guardrails: verify required fields are present
+  const requiredFields = ['backend', 'media_folder', 'collections'];
+  requiredFields.forEach(field => {
+    if (!(config as any)[field]) {
+      throw new Error(`[config.yml] Missing required field: ${field}`);
+    }
+  });
 
   const yaml = stringify(config);
   
-  // Log config values for debugging (base_url and auth_endpoint)
-  const resolvedAuthEndpoint = IS_LOCAL ? 'N/A (test-repo)' : authEndpoint;
+  // Log canonical config summary
+  const backendName = IS_LOCAL ? 'test-repo' : 'github';
+  const authEndpoint = IS_LOCAL ? 'N/A (test-repo)' : '/api/decap/authorize';
+  const repoInfo = IS_LOCAL ? 'local-fs' : `${repo}@${branch}`;
   const collectionsCount = config.collections.length;
   
-  // Always log configuration summary with backend details
-  const backendName = IS_LOCAL ? 'test-repo' : config.backend.name;
-  const repoInfo = IS_LOCAL ? 'local-fs' : `${repo}@${branch}`;
-  console.log(`[config.yml] base_url=${baseUrl} auth_endpoint=${resolvedAuthEndpoint} collections.len=${collectionsCount}`);
-  console.log(`[config.yml] backend=${backendName} repo=${repoInfo}`);
+  console.log(`[config.yml] base_url=${siteOrigin} auth_endpoint=${authEndpoint} backend=${backendName} repo=${repoInfo} collections.len=${collectionsCount}`);
   
-  // Warn if no collections (critical issue) and log each collection's folder path
+  // Always log collection details (crucial for debugging)
   if (collectionsCount === 0) {
     console.warn('[config.yml] WARNING: collections.len=0 - CMS will not initialize!');
   } else {
-    // Always log collection names and folders (crucial for debugging)
     config.collections.forEach((col: any, idx: number) => {
       console.log(`[config.yml] collection[${idx}]: name=${col.name} folder=${col.folder}`);
     });
   }
   
   const headers: Record<string, string> = {
     'Content-Type': 'text/yaml; charset=utf-8',
-    'Cache-Control': 'no-store, no-cache, must-revalidate',
-    'Pragma': 'no-cache',
-    'X-Decap-Mode': IS_LOCAL ? 'local' : 'git'
+    'Cache-Control': 'no-store',
+    'X-Decap-Backend': backendName,
   };
   
   if (DEBUG) {
     headers['X-Decap-Debug'] = '1';
   }
   
-  if (collectionsCount === 0) {
-    headers['X-Decap-Empty'] = '1';
-  }
-  
-  return new Response(yaml, {
-    headers
-  });
+  return new Response(yaml, { headers });
 };
 
diff --git a/apps/website/public/website-admin/config-loader.js b/apps/website/public/website-admin/config-loader.js
index old..new 100644
--- a/apps/website/public/website-admin/config-loader.js
+++ b/apps/website/public/website-admin/config-loader.js
@@ -59,21 +59,8 @@ async function resolvePath() {
 async function loadYaml(url) {
   const res = await fetch(url + (url.includes('?') ? '&' : '?') + 't=' + Date.now(), { cache: 'no-store' });
   if (!res.ok) throw new Error('Config fetch failed: ' + url);
   const text = await res.text();
-  return { config: window.jsyaml.load(text), rawText: text };
-}
-
-function ensureLocalBackend(cfg) {
-  const forceLocal = qs.get('local_backend') === 'true';
-  if (forceLocal) {
-    const def = { url: 'http://localhost:8081', allowed_hosts: ['localhost:4321'] };
-    if (cfg.local_backend === true) cfg.local_backend = def;
-    else if (!cfg.local_backend) cfg.local_backend = def;
-  } else {
-    delete cfg.local_backend;
-  }
-  return cfg;
+  // Return both parsed config and raw YAML text (exact response, no mutations)
+  return { config: window.jsyaml.load(text), rawText: text };
 }
 
 // ============================================================================
@@ -272,18 +259,18 @@ async function initCMS(config, rawYaml) {
       console.error('[cms] No valid config path found'); 
       return; 
     }
     
-    const { config: cfg, rawText: rawYaml } = await loadYaml(path);
-    const finalCfg = ensureLocalBackend(cfg);
+    // Load config from API (returns canonical minimal config)
+    const { config: cfg, rawText: rawYaml } = await loadYaml(path);
     
+    // Store references for debugging (no mutations)
     window.__CMS_CONFIG_PATH__ = path;
-    window.__CMS_CONFIG__ = finalCfg;
+    window.__CMS_CONFIG__ = cfg;
     window.__CMS_CONFIG_RAW_YAML__ = rawYaml;
     
     console.info('[cms] Loaded config from', path);
 
     // Wait for core to be truly ready
     await waitForCMSCore();
     
-    // Initialize with two-phase fallback
-    const result = await initCMS(finalCfg, rawYaml);
+    // Initialize with two-phase fallback (use config as-is from API)
+    const result = await initCMS(cfg, rawYaml);
     
     console.log('[cms-init] initialization complete: method=' + result.method + ' success=' + result.success);


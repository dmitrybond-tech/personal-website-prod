diff --git a/apps/website/src/pages/api/decap/authorize.ts b/apps/website/src/pages/api/decap/authorize.ts
new file mode 100644
index 00000000..c5b4e2c1
--- /dev/null
+++ b/apps/website/src/pages/api/decap/authorize.ts
@@ -0,0 +1,24 @@
+import type { APIRoute } from 'astro';
+
+export const prerender = false;
+
+/**
+ * Compatibility endpoint for /api/decap/authorize
+ * Redirects to the canonical OAuth handler at /api/decap/oauth/authorize
+ * preserving all query parameters.
+ */
+export const GET: APIRoute = async ({ url }) => {
+  // Build redirect URL to canonical OAuth handler
+  const redirectUrl = new URL('./oauth/authorize', url);
+  
+  // Preserve all query parameters from original request
+  url.searchParams.forEach((value, key) => {
+    redirectUrl.searchParams.set(key, value);
+  });
+
+  return new Response(null, {
+    status: 302,
+    headers: {
+      'Location': redirectUrl.toString(),
+      'Cache-Control': 'no-store'
+    }
+  });
+};
diff --git a/apps/website/src/pages/api/decap/callback.ts b/apps/website/src/pages/api/decap/callback.ts
new file mode 100644
index 00000000..e74f7e1c
--- /dev/null
+++ b/apps/website/src/pages/api/decap/callback.ts
@@ -0,0 +1,24 @@
+import type { APIRoute } from 'astro';
+
+export const prerender = false;
+
+/**
+ * Compatibility endpoint for /api/decap/callback
+ * Redirects to the canonical OAuth callback handler at /api/decap/oauth/callback
+ * preserving all query parameters (code, state, error, etc.).
+ */
+export const GET: APIRoute = async ({ url }) => {
+  // Build redirect URL to canonical OAuth callback handler
+  const redirectUrl = new URL('./oauth/callback', url);
+  
+  // Preserve all query parameters from original request
+  url.searchParams.forEach((value, key) => {
+    redirectUrl.searchParams.set(key, value);
+  });
+
+  return new Response(null, {
+    status: 302,
+    headers: {
+      'Location': redirectUrl.toString(),
+      'Cache-Control': 'no-store'
+    }
+  });
+};
diff --git a/apps/website/src/pages/api/website-admin/config.yml.ts b/apps/website/src/pages/api/website-admin/config.yml.ts
index 22bbf2e7..640be8a7 100644
--- a/apps/website/src/pages/api/website-admin/config.yml.ts
+++ b/apps/website/src/pages/api/website-admin/config.yml.ts
@@ -24,6 +24,9 @@ export const GET: APIRoute = async ({ request }) => {
     
   const repo = process.env.DECAP_GITHUB_REPO || 'dmitrybond-tech/personal-website-pre-prod';
   const branch = process.env.DECAP_GITHUB_BRANCH || 'main';
+  
+  // Locked OAuth endpoint (flat structure) - supports both /api/decap/authorize and /api/decap/oauth/authorize
+  const authEndpoint = '/api/decap/authorize';
 
   const config = {
     ...(IS_LOCAL ? { local_backend: true } : {}),
@@ -34,7 +37,7 @@ export const GET: APIRoute = async ({ request }) => {
           repo: repo,
           branch: branch,
           base_url: baseUrl,
-          auth_endpoint: '/api/decap/oauth'
+          auth_endpoint: authEndpoint
         },
     publish_mode: 'simple',
     media_folder: `${REPO_PREFIX}public/uploads`,
@@ -63,8 +66,8 @@ export const GET: APIRoute = async ({ request }) => {
 
   const yaml = stringify(config);
   // Log config values for debugging (base_url and auth_endpoint)
-  const authEndpoint = IS_LOCAL ? 'N/A (test-repo)' : '/api/decap/oauth';
-  console.log(`[config.yml] Generated config: base_url=${baseUrl}, auth_endpoint=${authEndpoint}, collections=${config.collections.length}`);
+  const resolvedAuthEndpoint = IS_LOCAL ? 'N/A (test-repo)' : authEndpoint;
+  console.log(`[config.yml] Generated config: base_url=${baseUrl}, auth_endpoint=${resolvedAuthEndpoint}, collections=${config.collections.length}`);
   
   return new Response(yaml, {
     headers: {

